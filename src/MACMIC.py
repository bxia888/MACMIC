import sys
import argparse
from sklearn.linear_model import LinearRegression

from util import *
from overlap import *
from table import *


def printHelp():
    print '\nMACMIC'
    print 'For help information for each function, try:\nMACMIC <function> -h'
    print '\nFunctions:'
    print '\nCalculate number of coincidence and mutual information of two features for MACMIC score of feature combination .'
    print '\nKaifu Chen, et al. chenkaifu@gmail.com, Chen lab, Cardiovascular department, Houston methodist.'
    print ''


def macmic():
    if (len(sys.argv) < 9) and ('-h' not in sys.argv) and ('--help' not in sys.argv):
        # at least one parameter need to be specified, will print help message if no parameter is specified
        print "\nusage:\n\nMACMIC <parameter for peak selector> <gene GTF> <danpos peak table1> <danpos peak table2> " \
              "\n\nfor more help, please try: MACMIC -h\n"
        return 1

    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                     usage="\n\nMACMIC <parameter for peak selector> <gene GTF> <danpos peak table1> <danpos peak table2>\n\n",
                                     description='', epilog="Chen lab, Houston Methodist")
    parser.add_argument('command', default=None, help="set as 'MICMAC' to Calculate number of coincidence and mutual information of two features for MACMIC score of feature combination.")

    parser.add_argument('selector_parameters', default=None,
                        help="Selector parameters for each feature peaks, "
                             "please see the example file in reference folder.")
    parser.add_argument('gene_GTF', default=None,
                        help="the file path of gene gtf following the format of UCSC genome browser.")
    parser.add_argument('peaks1_folder', default=None,
                        help="peak table generated by danpos for feature 1")
    parser.add_argument('peaks2_folder', default=None,
                        help="peak table generated by danpos for feature 2")

    if '-h' in sys.argv or '--help' in sys.argv:  # print help information once required by user
        print '\n'
        parser.print_help()
        print '\n'
        return 0

    elif len(sys.argv) >= 9:  # at least two parameter need to be specified
        args = parser.parse_args()  # all paramter values are now saved in args
    else:
        print "\nfor help, please try: MACMIC -h\n"
        return 0
    print ''

    if args is not None:
        parameter_path = args.selector_parameters
        gene_meta_table_path = args.gene_GTF
        peaks1_file = args.peaks1_folder
        peaks2_file = args.peaks2_folder

        feature_table1 = get_real_table("celltype1", peaks1_file, None, gene_meta_table_path, parameter_path)
        feature_table2 = get_real_table("celltype2", peaks2_file, None, gene_meta_table_path, parameter_path)

        feature_table = feature_table1.join(feature_table2)

        feature_bed1 = sort_bed(peaks1_file)
        feature_bed2 = sort_bed(peaks2_file)

        dist_df = merge_bed(feature_bed1, feature_bed2)

        feature_table = calculate_overlap(feature_table, gene_meta_table_path, dist_df)
        features = [x for x in feature_table.columns if x != "overlap"]
        coincidence = feature_table[feature_table["overlap"] == 1].shape[0]
        mi = MI_matrix(feature_table, features).iloc[0, 1]

        reg_df = pd.read_csv("../reference/MACMIC_reg.csv")
        X = reg_df.iloc[:, 0]
        y = reg_df.iloc[:, 1]
        reg = LinearRegression().fit(X, y)
        expected_coincidence = reg.predict(mi)
        macmic_score = round((coincidence - expected_coincidence)*1./expected_coincidence, 2)
        print "MACMIC score is ", macmic_score


if __name__ == "__main__":
    if len(sys.argv) > 1:
        if sys.argv[1] == 'GridGo':
            macmic()
        else:
            printHelp()
    else:
        print 'Maximal colocalization but minimal correlation (MACMIC)\n'
        print 'For help, please try:\nMACMIC -h'
        print 'Kaifu Chen, et al. chenkaifu@gmail.com, Chen lab, Cardiovascular department, Houston methodist.'